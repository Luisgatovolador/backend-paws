openapi: 3.0.0
info:
  title: API de Usuarios
  version: 1.0.0
  description: API para gestionar usuarios con login y 2FA offline
servers:
- url: http://localhost:3000

paths:

  /usuarios:
    post:
      summary: Obtiene un usuario por ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nombre:
                    type: string
                    example: Juan Pérez
                  email:
                    type: string
                    example: juan@example.com
                  rol:
                    type: string
                    example: usuario
        '201':
          description: Usuario no encontrado

  /usuarios/nuevo:
    post:
      summary: Crea un nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                email:
                  type: string
                password:
                  type: string
                rol:
                  type: string
                  enum: [ admin, editor, lector ]
      responses:
        '201':
          description: Usuario creado

  /usuarios/update:
    put:
      summary: Actualiza un usuario por ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ID del usuario a actualizar
                nombre:
                  type: string
                email:
                  type: string
                rol:
                  type: string
                  enum: [ admin, editor, lector ]
              required:
              - id
              - nombre
              - email
              - rol
      responses:
        '200':
          description: Usuario actualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  usuario:
                    type: object
                    properties:
                      id:
                        type: integer
                      nombre:
                        type: string
                      email:
                        type: string
                      rol:
                        type: string
        '201':
          description: Usuario no encontrado

  /usuarios/delete:
    delete:
      summary: Elimina un usuario enviando JSON con su ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  minimum: 1 # no permite negativos ni 0
                  description: ID del usuario (entero positivo)
              required:
              - id
      responses:
        '200':
          description: Usuario eliminado correctamente
        '201':
          description: ID inválido
        '202':
          description: Usuario no encontrado

  # --- Recuperación de contraseña ---
  /api/v1/forgot-password:
    post:
      summary: Enviar enlace para restablecer contraseña
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Correo de restablecimiento enviado
        '201':
          description: Usuario no encontrado

  /api/v1/reset-password/{token}:
    post:
      summary: Restablecer la contraseña con un token
      parameters:
      - in: path
        name: token
        required: true
        schema:
          type: string
        description: Token de restablecimiento
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
      responses:
        '200':
          description: Contraseña actualizada
        '201':
          description: Token inválido o expirado

  # --- Login online (sin 2FA) ---
  /api/v1/login:
    post:
      summary: Iniciar sesión (online, sin 2FA)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login exitoso, devuelve userId para 2FA si aplica
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  userId:
                    type: integer
        '201':
          description: Credenciales inválidas

  # --- Verificación 2FA offline (TOTP) ---
  /api/v1/verify-2fa:
    post:
      summary: Verificar código 2FA (offline / TOTP)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                code:
                  type: string
                  description: Código de 6 dígitos de Google Authenticator
      responses:
        '200':
          description: Inicio de sesión exitoso con 2FA, devuelve JWT
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  message:
                    type: string
        '201':
          description: Código 2FA inválido o expirado

  # --- Geolocation ---
  /api/v1/get-by-id:
    post:
      summary: Obtiene el historial de ubicaciones de un usuario por ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: ID del usuario para obtener el historial de ubicaciones.
              required:
              - userId
      responses:
        '200':
          description: Lista de ubicaciones para el usuario
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    latitude:
                      type: number
                    longitude:
                      type: number
                    timestamp:
                      type: string
                      format: date-time
                    action_id:
                      type: integer
        '201':
          description: Falta el ID de usuario o es inválido.
        '500':
          description: Error interno del servidor

  # --- Products ---
  /api/v1/products:
    get:
      summary: Obtener listado COMPLETO de productos
      tags: [ Productos ]
      # ELIMINADO: Ya no hay sección 'parameters' aquí.
      responses:
        '200':
          description: Lista de productos completa.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id_producto:
                      type: integer
                      example: 1
                    codigo:
                      type: string
                      example: LAP-001
                    nombre:
                      type: string
                      example: Laptop Empresarial X
                    stock_actual:
                      type: integer
        '500':
          description: Error interno del servidor

  /api/v1/products/stock-alert:
    get:
      summary: Obtener listado de productos con alerta de stock (Stock_Actual < Stock_Mínimo)
      tags: [ Productos ]
      # Esta ruta dedicada realiza la función que antes tenía el query.
      responses:
        '200':
          description: Lista de productos que requieren reposición.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id_producto:
                      type: integer
                    codigo:
                      type: string
                    stock_actual:
                      type: integer
                    stock_minimo:
                      type: integer
        '500':
          description: Error interno del servidor

  /api/v1/products/nuevo:
    post:
      summary: Crea un nuevo producto (Todos los campos requeridos excepto Descripción y Stock_Actual).
      tags: [ Productos ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # Aquí se espera el cuerpo JSON con todos los datos
              type: object
              properties:
                codigo:
                  type: string
                  maxLength: 20
                  pattern: '^[a-zA-Z0-9]+$'
                  example: LAP001
                nombre:
                  type: string
                  maxLength: 100
                  pattern: '^[a-zA-Z\s]+$'
                  example: Laptop Empresarial
                descripcion:
                  type: string
                  maxLength: 255
                  example: Equipo con procesador i7 de 12va generación
                  nullable: true
                categoria:
                  type: string
                  maxLength: 50
                  example: Computadoras
                unidad:
                  type: string
                  example: Pieza
                stock_minimo:
                  type: integer
                  minimum: 0
                  example: 5
                stock_actual:
                  type: integer
                  minimum: 0
                  example: 0
              required:
              - codigo
              - nombre
              - categoria
              - unidad
              - stock_minimo
      responses:
        '201':
          description: Producto creado exitosamente.
        '400':
          description: Datos inválidos o código duplicado.

  /api/v1/products/update:
    put:
      summary: Actualiza un producto enviando su ID en el cuerpo JSON.
      tags: [ Productos ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # Aquí se espera el cuerpo JSON con el ID_Producto
              type: object
              properties:
                id_producto:
                  type: integer
                  description: ID del producto a actualizar.
                  example: 1
                codigo:
                  type: string
                  description: Nuevo código (opcional).
                # ... (Otros campos de actualización)
              required:
              - id_producto
      responses:
        '200':
          description: Producto actualizado.
        '404':
          description: Producto no encontrado.

  /api/v1/products/delete:
    delete:
      summary: Elimina un producto enviando su ID en el cuerpo JSON.
      tags: [ Productos ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # Aquí se espera el cuerpo JSON con el ID_Producto
              type: object
              properties:
                id_producto:
                  type: integer
                  description: ID del producto a eliminar.
                  example: 1
              required:
              - id_producto
      responses:
        '200':
          description: Producto eliminado.
        '400':
          description: El producto tiene movimientos de inventario asociados (FK conflict).
        '404':
          description: Producto no encontrado.

  # --- Registro Movimientos ---
  /api/v1/movimientos/registrar:
    post:
      summary: Registra una Entrada o Salida de producto y actualiza el stock.
      tags: [ Movimientos ]
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_producto:
                  type: integer
                  example: 12
                  description: ID del producto afectado.
                tipo:
                  type: string
                  enum: [ Entrada, Salida ]
                  example: Entrada
                cantidad:
                  type: integer
                  minimum: 1
                  example: 10
                referencia:
                  type: string
                  maxLength: 50
                  description: Número de factura o documento de soporte (opcional).
                  nullable: true
                responsable:
                  type: string
                  maxLength: 80
                  description: Nombre del responsable de la operación.
                  example: Ana Lopez
              required:
              - id_producto
              - tipo
              - cantidad
              - responsable
      responses:
        '201':
          description: Movimiento registrado y Stock_Actual actualizado con éxito.
        '400':
          description: Datos inválidos o Salida mayor al stock disponible.
        '401':
          description: No autorizado (Token inválido).
        '403':
          description: Prohibido (Rol no permitido).

  /api/v1/movimientos/historial:
    post:
      summary: Obtiene el historial de movimientos para un producto específico, enviando el ID en el cuerpo JSON.
      tags: [ Movimientos ]
      security:
      - bearerAuth: []
      requestBody:
        # <-- Ahora usamos requestBody
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_producto:
                  type: integer
                  minimum: 1
                  example: 12
                  description: El ID del producto a consultar.
              required:
              - id_producto
      responses:
        '200':
          description: Listado de movimientos históricos.
          # ... (Definición del schema de respuesta)
        '401':
          description: No autorizado.
        '404':
          description: Producto no encontrado o sin movimientos.


# --- AGREGA TODO ESTE BLOQUE AL FINAL DE 'paths' ---
  /api/v1/proveedores:
    get:
      summary: Obtiene la lista de todos los proveedores
      tags: [Proveedores]
      responses:
        '200':
          description: Lista de proveedores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proveedor'
    post:
      summary: Crea un nuevo proveedor
      tags: [Proveedores]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  description: "Obligatorio, solo letras y espacios, max 100"
                  example: "Logística Express"
                telefono:
                  type: string
                  description: "Obligatorio, solo números, 8-15 dígitos"
                  example: "4181234567"
                contacto:
                  type: string
                  description: "Opcional, max 100"
                  example: "Ana García"
              required: [nombre, telefono]
      responses:
        '201':
          description: Proveedor creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proveedor'
        '400':
          description: Error de validación (ej. falta nombre, teléfono inválido)
        '409':
          description: Error de duplicado (mismo nombre y teléfono)

  # ... (Aquí va el /api/v1/proveedores de GET y POST que te di antes) ...

  # --- RUTAS DE PROVEEDORES CON ID EN EL BODY ---
  /api/v1/proveedores/detail:
    post:
      summary: Obtiene proveedores por ID, Nombre, o todos si no hay filtros
      tags: [Proveedores]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                # --- ESTOS DOS CAMPOS DEBEN ESTAR PRESENTES ---
                id_proveedor:
                  type: integer
                  example: 1
                  description: "ID numérico del proveedor (opcional)"
                nombre:
                  type: string
                  example: "Express"
                  description: "Nombre o parte del nombre del proveedor (opcional)"
              description: "Proporcionar ID o nombre para filtrar. Enviar un objeto vacío {} para obtener todos los proveedores."
      responses:
        '200':
          description: Lista de proveedores encontrados

          
  /api/v1/proveedores/update:
    put:
      summary: Actualiza un proveedor existente
      tags: [Proveedores]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_proveedor:
                  type: integer
                  example: 1
                nombre:
                  type: string
                  example: "Logística Express Editado"
                telefono:
                  type: string
                  example: "4181234568"
                contacto:
                  type: string
                  example: "Ana García G."
              required: [id_proveedor]
      responses:
        '200':
          description: Proveedor actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proveedor'
        '400':
          description: Error de validación o falta el ID
        '404':
          description: Proveedor no encontrado

  /api/v1/proveedores/delete:
    delete:
      summary: Elimina un proveedor por su ID
      tags: [Proveedores]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_proveedor:
                  type: integer
                  example: 1
              required: [id_proveedor]
      responses:
        '200':
          description: Proveedor eliminado exitosamente
        '404':
          description: Proveedor no encontrado
        '409':
          description: Conflicto (ej. no se puede borrar, tiene movimientos asociados)
  /api/v1/products/status:
    put:
      summary: Cambiar el estado de un producto (alta/baja) por ID o nombre
      tags: [Productos]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_producto:
                  type: integer
                  example: 1
                nombre:
                  type: string
                  example: "Producto de ejemplo"
                activo:
                  type: integer
                  enum: [0, 1]
                  description: 1 = alta, 0 = baja
              required: [activo]
      responses:
        '200':
          description: Estado del producto actualizado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Producto(s) actualizado(s) correctamente.
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        id_producto:
                          type: integer
                          example: 1
                        nombre:
                          type: string
                          example: "Producto de ejemplo"
                        activo:
                          type: boolean
                          example: true
        '400':
          description: Error de validación (falta de parámetros o activo inválido)
        '404':
          description: Producto no encontrado
        '500':
          description: Error interno del servidor

          # --- INICIO DEL BLOQUE PARA CLIENTES ---

  /api/v1/clientes:
    get:
      summary: Obtiene la lista de todos los clientes
      tags: [Clientes]
      responses:
        '200':
          description: Lista de clientes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cliente'
    post:
      summary: Crea un nuevo cliente
      tags: [Clientes]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  description: "Obligatorio, solo letras y espacios, max 100"
                  example: "Ana Sofía Martínez"
                telefono:
                  type: string
                  description: "Obligatorio, solo números, 8-15 dígitos"
                  example: "4151234567"
                contacto:
                  type: string
                  description: "Opcional, max 100"
                  example: "Gerente de Compras"
              required: [nombre, telefono]
      responses:
        '201':
          description: Cliente creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'
        '400':
          description: Error de validación (ej. falta nombre, teléfono inválido)
        '409':
          description: Error de duplicado (mismo nombre y teléfono)

  /api/v1/clientes/detail:
    post:
      summary: Obtiene clientes por ID, Nombre, o todos si no hay filtros
      tags: [Clientes]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_cliente:
                  type: integer
                  example: 1
                  description: "ID numérico del cliente (opcional)"
                nombre:
                  type: string
                  example: "Ana"
                  description: "Nombre o parte del nombre del cliente (opcional)"
              description: "Proporcionar ID o nombre para filtrar. Enviar un objeto vacío {} para obtener todos los clientes."
      responses:
        '200':
          description: Lista de clientes encontrados

  /api/v1/clientes/update:
    put:
      summary: Actualiza un cliente existente
      tags: [Clientes]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_cliente:
                  type: integer
                  example: 1
                nombre:
                  type: string
                  example: "Ana Sofía Rodríguez"
                telefono:
                  type: string
                  example: "4151234568"
                contacto:
                  type: string
                  example: "Directora de Compras"
              required: [id_cliente]
      responses:
        '200':
          description: Cliente actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'
        '400':
          description: Error de validación o falta el ID
        '404':
          description: Cliente no encontrado
        '409':
          description: El nuevo nombre o teléfono ya está en uso

  /api/v1/clientes/delete:
    delete:
      summary: Elimina un cliente por su ID
      tags: [Clientes]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_cliente:
                  type: integer
                  example: 1
              required: [id_cliente]
      responses:
        '200':
          description: Cliente eliminado exitosamente
        '404':
          description: Cliente no encontrado
        '409':
          description: Conflicto (no se puede borrar, tiene movimientos asociados)
# --- FIN DEL BLOQUE PARA CLIENTES ---
# 'components' comienza aquí, SIN NINGUNA INDENTACIÓN
components:
  schemas:
    Proveedor:
      type: object
      properties:
        id_proveedor:
          type: integer
          example: 1
        nombre:
          type: string
          example: "TecnoGlobal S.A."
        telefono:
          type: string
          example: "5512345678"
        contacto:
          type: string
          example: "Juan Pérez"

    Cliente:
      type: object
      properties:
        id_cliente:
          type: integer
          example: 1
        nombre:
          type: string
          example: "Carlos Rodríguez"
        telefono:
          type: string
          example: "4151112233"
        contacto:
          type: string
          example: "Compras"